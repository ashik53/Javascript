import { Component } from '@angular/core';

import { COMMA, ENTER } from '@angular/cdk/keycodes';
import { MatChipInputEvent } from '@angular/material/chips';
import { map, catchError, flatMap, mergeMap, toArray, tap, switchMap, concatMap, delay, filter, mergeAll} from 'rxjs/operators';
import { Observable, throwError, Subject, BehaviorSubject, of, from} from 'rxjs';

export interface Fruit {
  name: string;
}

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {


  

  constructor() {
    this.check()
    this.check2();
    this.check3();// with mergeAll() 
  }
  check2(){
    console.log("without additional subscription--------------")
    const getData = (param) => {
      return of(`retrieved new data with param ${param}`).pipe(
        
      )
    }
    
    //suppose one api returns an observable array, then we have to subscribe
    from([1,2,3,4]).pipe(
      map(param => getData(param))
    ).subscribe(val => console.log(val)); // no subscription for inner observable
  }
  check(){
    console.log("with additional----------------")
    const getData = (param) => {
      return of(`retrieved new data with param ${param}`).pipe(
        
      )
    }
    
    from([1,2,3,4]).pipe(
      map(param => getData(param))
    ).subscribe(val => val.subscribe(data => console.log(data))); //again subscribe

  }// check

  check3(){
    console.log("merge All --------------")
    const getData = (param) => {
      return of(`retrieved new data with param ${param}`)
    }
    
    from([1,2,3,4]).pipe(
      map(param => getData(param)),
      mergeAll() // mergeAll() moves inner observables to outer observabes
    ).subscribe(data => console.log(data)); //again subscribe
    
    console.log("Now I will use mergemap")
    from([1,2,34]).pipe(
      mergeMap(param => getData(param)),
    ).subscribe(data => console.log(data))

  }// check

}
